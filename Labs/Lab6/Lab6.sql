USE master;
GO

CREATE DATABASE SOCIAL_NETWORK;
GO

USE SOCIAL_NETWORK;
GO

CREATE TABLE USERS
(
	ID INT IDENTITY(1, 1) NOT NULL,
	NICKNAME NVARCHAR(30) UNIQUE NOT NULL,

	CONSTRAINT PK_USER_ID PRIMARY KEY CLUSTERED (ID ASC)
);

CREATE TABLE POSTS
(
	ID INT IDENTITY(1, 1) NOT NULL,
	CONTENT NVARCHAR(300) NOT NULL,
	OWNER_ID INT NOT NULL,

	CONSTRAINT PK_POSTS_ID PRIMARY KEY CLUSTERED (ID ASC),
	CONSTRAINT FK_POSTS_TO_USERS FOREIGN KEY (OWNER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE NONCLUSTERED INDEX [NIX_POSTS_OWNER_ID]
ON [dbo].POSTS (OWNER_ID) WITH (ONLINE = ON);

CREATE TABLE COMMENTS
(
	ID INT IDENTITY(1, 1) NOT NULL,
	CONTENT NVARCHAR(100) NOT NULL,
	OWNER_ID INT NOT NULL,
	POST_ID INT NOT NULL,

	CONSTRAINT PK_COMMENTS_ID PRIMARY KEY CLUSTERED (ID ASC),
	CONSTRAINT FK_COMMENTS_TO_USERS FOREIGN KEY (OWNER_ID) REFERENCES USERS(ID),
	CONSTRAINT FK_COMMENTS_TO_POSTS FOREIGN KEY (POST_ID) REFERENCES POSTS(ID) ON DELETE CASCADE,
);

CREATE NONCLUSTERED INDEX [NIX_COMMENTS_OWNER_ID]
ON [dbo].COMMENTS (OWNER_ID) WITH (ONLINE = ON);

CREATE NONCLUSTERED INDEX [NIX_COMMENTS_POST_ID]
ON [dbo].COMMENTS (POST_ID) WITH (ONLINE = ON);

CREATE TABLE LIKES
(
	POST_ID INT NOT NULL,
	OWNER_ID INT NOT NULL,

	CONSTRAINT PK_LIKES PRIMARY KEY CLUSTERED (POST_ID ASC, OWNER_ID ASC),
	CONSTRAINT FK_LIKES_TO_POSTS FOREIGN KEY (POST_ID) REFERENCES POSTS(ID) ON DELETE CASCADE,
	CONSTRAINT FK_LIKES_TO_USERS FOREIGN KEY (OWNER_ID) REFERENCES USERS(ID)
);

CREATE TABLE SUBSCRIPTIONS
(
	OWNER_ID INT NOT NULL,
	SUBSCRIBER_ID INT NOT NULL,

	CONSTRAINT PK_SUBSCRIPTIONS PRIMARY KEY CLUSTERED (OWNER_ID ASC, SUBSCRIBER_ID ASC),
	CONSTRAINT FK_SUBSCRIPTIONS_TO_USERS FOREIGN KEY (OWNER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
	CONSTRAINT FK_SUBSCRIPTIONS_TO_SUBSCRIBERS FOREIGN KEY (SUBSCRIBER_ID) REFERENCES USERS(ID)
);
GO

INSERT INTO USERS(nickname)
VALUES('user1'),
			('user2'),
			('user3');

INSERT INTO posts (content, owner_id)
VALUES('content1', 1),
			('content2', 1),
			('content3', 2),
			('content4', 3);

INSERT INTO comments (content, owner_id, post_id)
VALUES('content1', 1, 1),
			('content2', 1, 2),
			('content3', 2, 2),
			('content4', 3, 3);

INSERT INTO likes (post_id, owner_id)
VALUES(2, 1),
			(1, 1),
			(1, 2),
			(3, 3);

INSERT INTO subscriptions (owner_id, subscriber_id)
VALUES(2, 2),
			(2, 3);